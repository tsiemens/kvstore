package main

import (
	"flag"
	"io/ioutil"
	"os"

	"github.com/tsiemens/kvstore/client/debug"
	"github.com/tsiemens/kvstore/shared/log"
)

func main() {
	log.Init(ioutil.Discard, os.Stdout, os.Stderr)
	cl := getCommandLine()
	if cl.Debug {
		log.Init(os.Stdout, os.Stdout, os.Stderr)
	}

	debug.Send(cl.Conf)
}

type KVDBCommandLine struct {
	Debug bool
	Conf  *debug.SendConfig
}

func getCommandLine() *KVDBCommandLine {
	if flag.Parsed() {
		return nil
	}

	msgTypePtr := flag.String("msgtype", "kv", "The message type to be send (k, v, kv)")
	waitForReplyPtr := flag.Bool("reply", false, "Wait for a reply")
	valuePtr := flag.String("value", "", "The variable length value to send")
	valueLengthPtr := flag.Int("vallen", -1, "An alternate value length to put in the message. Defaults to the length of the value")
	keyPtr := flag.String("key", "00", "A hex key to put in the message")
	uidPtr := flag.String("uid", "0000", "A UID to use for the message. Up to 16 bytes. Defaults to an autogenerated UID.")
	cmdPtr := flag.String("cmd", "00", "A single byte command code (hex)")

	urlPtr := flag.String("host", "localhost:5555", "Where to send the message")

	debugPtr := flag.Bool("debug", false, "Enable debug logging")
	hPtr := flag.Bool("h", false, "Show help text")
	helpPtr := flag.Bool("help", false, "Show help text")

	flag.Parse()

	if *helpPtr || *hPtr {
		printHelp()
		os.Exit(0)
	}

	vallen := *valueLengthPtr
	if vallen == -1 {
		vallen = len(*valuePtr)
	}

	conf := &debug.SendConfig{
		URL:          *urlPtr,
		MsgType:      *msgTypePtr,
		WaitForReply: *waitForReplyPtr,
		Value:        *valuePtr,
		ValueLen:     vallen,
		Key:          *keyPtr,
		UID:          *uidPtr,
		Command:      *cmdPtr,
	}

	return &KVDBCommandLine{
		Debug: *debugPtr,
		Conf:  conf,
	}
}

func printHelp() {
	log.Out.Println("Debug client for the KVStore Key Value Store. Sends a configurable message.\n\n" +
		"Usage:\n    client [OPTIONS]\n")
	log.Out.Println("\nOptions:")
	flag.PrintDefaults()
}
